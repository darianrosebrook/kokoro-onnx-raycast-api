id: KOKORO-001
title: Kokoro ONNX TTS Backend API with Raycast Integration
risk_tier: 2
profile: backend-api
rationale: >
  Real-time TTS API serving ONNX models via FastAPI with streaming audio generation.
  Integrates with Raycast for user-facing voice synthesis. Performance-critical with
  strict latency and audio quality requirements per kokoro-tts-optimization-blueprint.
mode: feature
change_budget:
  max_files: 25
  max_loc: 1000
blast_radius:
  modules:
    - api/
    - api/model/
    - api/tts/
    - api/performance/
    - raycast/
    - tests/
  data_migration: false
operational_rollback_slo: 5m
threats: []
scope:
  in:
    - api/
    - api/model/
    - api/tts/
    - api/performance/
    - raycast/src/
    - tests/
    - scripts/
    - docs/
  out:
    - node_modules/
    - __pycache__/
    - .venv/
    - optimized_models/
    - artifacts/
    - logs/
    - temp/
invariants:
  - TTFA (short, ~140 chars) ≤ 0.50s p95
  - RTF (long paragraph) ≤ 0.60 p95
  - Underruns ≤ 1 per 10 minutes
  - Loudness -16 LUFS ±1 LU, dBTP ≤ -1.0 dB
  - Memory envelope (RSS) ±300 MB steady-state
  - Server binds to 127.0.0.1 by default
  - API versioned under /v1
  - Text sanitized before G2P (Misaki primary, eSpeak fallback)
acceptance:
  - id: A1
    given: valid text input (~140 chars)
    when: /v1/tts request received
    then: TTFA ≤ 0.50s p95, audio stream begins
  - id: A2
    given: long paragraph input
    when: /v1/tts with streaming enabled
    then: RTF ≤ 0.60 p95, no underruns, monotonic playback
  - id: A3
    given: malformed or unsupported text
    when: /v1/tts request received
    then: explainable error, no state change, no PII in logs
  - id: A4
    given: concurrent requests
    when: multiple /v1/tts calls
    then: memory envelope maintained, no drift in TTFA/RTF
non_functional:
  a11y:
    axe_rules: []
    keyboard_paths: []
    contrast_min: 4.5
  i18n:
    locales:
      - en-US
      - ja-JP
    rtl_supported: false
  perf:
    api_p95_ms: 500
    ttfa_p95_ms: 500
    rtf_p95: 0.60
  security:
    - Server-side input validation
    - PII redaction in logs
    - No client trust for audio generation params
  security_policy:
    sast_max_severity: none
    secret_scan_block: true
    dep_policy: strict
contracts:
  - type: openapi
    role: provider
    path: contracts/kokoro-tts-api.yaml
observability:
  logs:
    - Request start/end with duration
    - TTFA per request
    - RTF per request
    - Errors with sanitized input context
  metrics:
    - tts_requests_total
    - tts_ttfa_seconds
    - tts_rtf_ratio
    - tts_errors_total
    - tts_underruns_total
  traces:
    - /v1/tts span with text_length, voice, streaming attributes
migrations: []
rollback:
  - Feature flag kill-switch via environment variables
  - Provider fallback (Core ML -> ORT)
  - Quantization fallback (INT8 -> FP16)
ai_assessment:
  confidence_level: 0.9
  uncertainty_areas:
    - Core ML EP selection logic (ALL vs CPUAndGPU)
    - Memory profiling under sustained load
  complexity_factors:
    - Real-time audio streaming with buffering
    - Multi-provider ONNX session management
    - Performance monitoring and adaptive optimization
  risk_factors:
    - Audio quality regression from quantization
    - Memory leaks in long-running sessions
    - Platform-specific Core ML behavior
